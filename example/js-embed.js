document.write('<style scoped>.paint-bordered {    border: 1px solid #dddddd;    border-radius: 2px;}.paint-bordered .info {    display: flex;    justify-content: space-between;    color: rgba(36, 41, 46, 0.7490196);    background: #f9f9f9;    margin: 0;    padding: 10px 15px 10px;    font-size: 12px;    font-family: SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace;    line-height: 1.2;}.paint-bordered .info.header {    border-bottom: 1px solid #dddddd;}.paint-bordered .info.footer {    border-top: 1px solid #dddddd;}.paint-bordered .info .left {    font-weight: 500;    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;}.paint-bordered .info .right span:not(:last-child) {    padding-right: 10px;    margin-right: 10px;    border-right: 1px solid rgba(36, 41, 46, 0.101960786);}.paint {    display: block;    width: 100%;    padding: 10px 0;    overflow-x: auto;    -webkit-overflow-scrolling: touch;    color: #24292e;    background-color: #ffffff;}.paint table {    width: 100%;    border-spacing: 0;    border-collapse: separate;    font-family: SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace;    font-size: 12px;    line-height: 20px;    tab-size: 4;    color: inherit;    -webkit-text-size-adjust: 100%;    -moz-text-size-adjust: 100%;    -ms-text-size-adjust: 100%;    text-rendering: optimizeLegibility;}.paint td {    padding: 0 10px; white-space: pre;}.paint .ln {    width: 1px;    min-width: 25px;    box-sizing: content-box;    text-align: right;    -webkit-user-select: none;    -moz-user-select: none;    -ms-user-select: none;    user-select: none;    color: #bebfbf; }.paint .ln::after {    content: attr(data-ln);}.paint .hi {    background-color: #fffbdd;}.paint .un { text-decoration: underline; }.paint .bo { font-weight: bold; }.paint .it { font-style: italic; }        .paint .pt18 { color: #e36209; }.paint .pt20 { color: #fafbfc; }.paint .pt3 { background: #d73a49; }.paint .pt2 { background: #b31d28; }.paint .pt16 { color: #b31d28; }.paint .pt5 { background: #ffebda; }.paint .pt19 { color: #f6f8fa; }.paint .pt14 { color: #735c0f; }.paint .pt17 { color: #d73a49; }.paint .pt12 { color: #6a737d; }.paint .pt13 { color: #6f42c1; }.paint .pt7 { color: #005cc5; }.paint .pt9 { color: #22863a; }.paint .pt1 { background: #005cc5; }.paint .pt15 { color: #959da5; }.paint .pt10 { color: #242930; }.paint .pt11 { color: #586069; }.paint .pt8 { color: #032f62; }.paint .pt4 { background: #f0fff4; }.paint .pt6 { background: #ffeef0; }</style>');
document.write('<div class=\'paint-bordered\'>        <div class="info header">            <span class="left">main.js</span>            <span class="right">69 lines</span>        </div>    <div class=\'paint\'><table><tr><td class=\'ln\' data-ln=\'1\'></td><td><span class=\'pt12\'>// keep a WebAssembly memory reference for `readString`</span></td></tr><tr><td class=\'ln\' data-ln=\'2\'></td><td><span class=\'pt17\'>let</span> <span class=\'pt10\'>memory</span>;</td></tr><tr><td class=\'ln\' data-ln=\'3\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'4\'></td><td><span class=\'pt12\'>// read a null terminated c string at a wasm memory buffer index</span></td></tr><tr><td class=\'ln\' data-ln=\'5\'></td><td><span class=\'pt17\'>function</span> <span class=\'pt13\'>readString</span>(<span class=\'pt10\'>ptr</span>) {</td></tr><tr><td class=\'ln\' data-ln=\'6\'></td><td>  <span class=\'pt17\'>const</span> <span class=\'pt10\'>view</span> = <span class=\'pt17\'>new</span> <span class=\'pt7\'>Uint8Array</span>(<span class=\'pt10\'>memory.buffer</span>);</td></tr><tr><td class=\'ln\' data-ln=\'7\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'8\'></td><td>  <span class=\'pt12\'>// find the end of the string (null)</span></td></tr><tr><td class=\'ln\' data-ln=\'9\'></td><td>  <span class=\'pt17\'>let</span> <span class=\'pt10\'>end</span> = <span class=\'pt10\'>ptr</span>;</td></tr><tr><td class=\'ln\' data-ln=\'10\'></td><td>  <span class=\'pt17\'>while</span> (<span class=\'pt10\'>view</span>[<span class=\'pt10\'>end</span>]) <span class=\'pt17\'>++</span><span class=\'pt10\'>end</span>;</td></tr><tr><td class=\'ln\' data-ln=\'11\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'12\'></td><td>  <span class=\'pt12\'>// `subarray` uses the same underlying ArrayBuffer as the view</span></td></tr><tr><td class=\'ln\' data-ln=\'13\'></td><td>  <span class=\'pt17\'>const</span> <span class=\'pt10\'>buf</span> = <span class=\'pt17\'>new</span> <span class=\'pt7\'>Uint8Array</span>(<span class=\'pt10\'>view.</span><span class=\'pt13\'>subarray</span>(<span class=\'pt10\'>ptr</span>, <span class=\'pt10\'>end</span>));</td></tr><tr><td class=\'ln\' data-ln=\'14\'></td><td>  <span class=\'pt17\'>const</span> <span class=\'pt10\'>str</span> = (<span class=\'pt17\'>new</span> <span class=\'pt7\'>TextDecoder</span>())<span class=\'pt10\'>.</span><span class=\'pt13\'>decode</span>(<span class=\'pt10\'>buf</span>); <span class=\'pt12\'>// (utf-8 by default)</span></td></tr><tr><td class=\'ln\' data-ln=\'15\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'16\'></td><td>  <span class=\'pt17\'>return</span> <span class=\'pt10\'>str</span>;</td></tr><tr><td class=\'ln\' data-ln=\'17\'></td><td>}</td></tr><tr><td class=\'ln\' data-ln=\'18\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'19\'></td><td><span class=\'pt12\'>// necessary imports under the `env` namespace (rust looks for exports here)</span></td></tr><tr><td class=\'ln\' data-ln=\'20\'></td><td><span class=\'pt12\'>//</span></td></tr><tr><td class=\'ln\' data-ln=\'21\'></td><td><span class=\'pt12\'>// `wasm_glue::hook()` requires all three</span></td></tr><tr><td class=\'ln\' data-ln=\'22\'></td><td><span class=\'pt17\'>const</span> <span class=\'pt10\'>imports</span> = {</td></tr><tr><td class=\'ln\' data-ln=\'23\'></td><td>  <span class=\'pt8\'>env</span><span class=\'pt17\'>:</span> {</td></tr><tr><td class=\'ln\' data-ln=\'24\'></td><td>    <span class=\'pt12\'>// needed for `wasm_glue::set_stdout()` or `#[macro_use(print)]`</span></td></tr><tr><td class=\'ln\' data-ln=\'25\'></td><td>    <span class=\'pt13\'>print</span>(<span class=\'pt10\'>ptr</span>) {</td></tr><tr><td class=\'ln\' data-ln=\'26\'></td><td>      <span class=\'pt12\'>// sidenote: this doesn&#39;t have to be a console.log(). You could put</span></td></tr><tr><td class=\'ln\' data-ln=\'27\'></td><td>      <span class=\'pt12\'>// this up in the html too if you wanted.</span></td></tr><tr><td class=\'ln\' data-ln=\'28\'></td><td>      <span class=\'pt17\'>console</span><span class=\'pt10\'>.</span><span class=\'pt13\'>log</span>(<span class=\'pt13\'>readString</span>(<span class=\'pt10\'>ptr</span>));</td></tr><tr><td class=\'ln\' data-ln=\'29\'></td><td>    },</td></tr><tr><td class=\'ln\' data-ln=\'30\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'31\'></td><td>    <span class=\'pt12\'>// needed for `wasm_glue::set_stderr()` or `#[macro_use(eprint)]`</span></td></tr><tr><td class=\'ln\' data-ln=\'32\'></td><td>    <span class=\'pt13\'>eprint</span>(<span class=\'pt10\'>ptr</span>) {</td></tr><tr><td class=\'ln\' data-ln=\'33\'></td><td>      <span class=\'pt17\'>console</span><span class=\'pt10\'>.</span><span class=\'pt13\'>warn</span>(<span class=\'pt13\'>readString</span>(<span class=\'pt10\'>ptr</span>));</td></tr><tr><td class=\'ln\' data-ln=\'34\'></td><td>    },</td></tr><tr><td class=\'ln\' data-ln=\'35\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'36\'></td><td>    <span class=\'pt12\'>// needed for `wasm_glue::set_panic_hook()`</span></td></tr><tr><td class=\'ln\' data-ln=\'37\'></td><td>    <span class=\'pt13\'>trace</span>(<span class=\'pt10\'>ptr</span>) {</td></tr><tr><td class=\'ln\' data-ln=\'38\'></td><td>      <span class=\'pt17\'>const</span> <span class=\'pt10\'>err</span> = <span class=\'pt17\'>new</span> <span class=\'pt7\'>Error</span>(<span class=\'pt13\'>readString</span>(<span class=\'pt10\'>ptr</span>));</td></tr><tr><td class=\'ln\' data-ln=\'39\'></td><td>      <span class=\'pt12\'>// here is where you could demangle the stack trace with:</span></td></tr><tr><td class=\'ln\' data-ln=\'40\'></td><td>      <span class=\'pt12\'>// https://github.com/demille/wasm-ffi/blob/master/src/demangle.js</span></td></tr><tr><td class=\'ln\' data-ln=\'41\'></td><td>      <span class=\'pt17\'>throw</span> <span class=\'pt10\'>err</span>;</td></tr><tr><td class=\'ln\' data-ln=\'42\'></td><td>    },</td></tr><tr><td class=\'ln\' data-ln=\'43\'></td><td>  },</td></tr><tr><td class=\'ln\' data-ln=\'44\'></td><td>};</td></tr><tr><td class=\'ln\' data-ln=\'45\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'46\'></td><td><span class=\'pt12\'>// fetch and instantiate the wasm module</span></td></tr><tr><td class=\'ln\' data-ln=\'47\'></td><td><span class=\'pt13\'>fetch</span>(<span class=\'pt8\'>&#39;example.wasm&#39;</span>)</td></tr><tr><td class=\'ln\' data-ln=\'48\'></td><td>  <span class=\'pt10\'>.</span><span class=\'pt13\'>then</span>(<span class=\'pt10\'>response</span> <span class=\'pt17\'>=&gt;</span> <span class=\'pt10\'>response.</span><span class=\'pt13\'>arrayBuffer</span>())</td></tr><tr><td class=\'ln\' data-ln=\'49\'></td><td>  <span class=\'pt10\'>.</span><span class=\'pt13\'>then</span>(<span class=\'pt10\'>buffer</span> <span class=\'pt17\'>=&gt;</span> <span class=\'pt7\'>WebAssembly</span><span class=\'pt10\'>.</span><span class=\'pt13\'>instantiate</span>(<span class=\'pt10\'>buffer</span>, <span class=\'pt10\'>imports</span>))</td></tr><tr><td class=\'ln\' data-ln=\'50\'></td><td>  <span class=\'pt10\'>.</span><span class=\'pt13\'>then</span>((<span class=\'pt10\'>result</span>) <span class=\'pt17\'>=&gt;</span> {</td></tr><tr><td class=\'ln\' data-ln=\'51\'></td><td>    <span class=\'pt17\'>console</span><span class=\'pt10\'>.</span><span class=\'pt13\'>log</span>(<span class=\'pt8\'>&#39;wasm loaded!: &#39;</span>, <span class=\'pt10\'>result</span>);</td></tr><tr><td class=\'ln\' data-ln=\'52\'></td><td>    <span class=\'pt17\'>const</span> <span class=\'pt10\'>exports</span> = <span class=\'pt10\'>result.instance.exports</span>;</td></tr><tr><td class=\'ln\' data-ln=\'53\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'54\'></td><td>    <span class=\'pt12\'>// update memory reference for readString</span></td></tr><tr><td class=\'ln\' data-ln=\'55\'></td><td>    <span class=\'pt10\'>memory</span> = <span class=\'pt10\'>exports.memory</span>;</td></tr><tr><td class=\'ln\' data-ln=\'56\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'57\'></td><td>    <span class=\'pt12\'>// wasm_glue::hook() need to be called before anything that will print</span></td></tr><tr><td class=\'ln\' data-ln=\'58\'></td><td>    <span class=\'pt17\'>exports</span><span class=\'pt10\'>.</span><span class=\'pt13\'>hook</span>();</td></tr><tr><td class=\'ln\' data-ln=\'59\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'60\'></td><td>    <span class=\'pt12\'>// wasm calls: imports.env.print()</span></td></tr><tr><td class=\'ln\' data-ln=\'61\'></td><td>    <span class=\'pt17\'>exports</span><span class=\'pt10\'>.</span><span class=\'pt13\'>print_add</span>(<span class=\'pt7\'>2</span>, <span class=\'pt7\'>2</span>);</td></tr><tr><td class=\'ln\' data-ln=\'62\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'63\'></td><td>    <span class=\'pt12\'>// wasm calls: imports.env.eprint()</span></td></tr><tr><td class=\'ln\' data-ln=\'64\'></td><td>    <span class=\'pt17\'>exports</span><span class=\'pt10\'>.</span><span class=\'pt13\'>print_err_msg</span>();</td></tr><tr><td class=\'ln\' data-ln=\'65\'></td><td>&#10;</td></tr><tr><td class=\'ln\' data-ln=\'66\'></td><td>    <span class=\'pt12\'>// wasm panic will trigger: imports.env.trace()</span></td></tr><tr><td class=\'ln\' data-ln=\'67\'></td><td>    <span class=\'pt17\'>exports</span><span class=\'pt10\'>.</span><span class=\'pt13\'>cause_panic</span>();</td></tr><tr><td class=\'ln\' data-ln=\'68\'></td><td>  })</td></tr><tr><td class=\'ln\' data-ln=\'69\'></td><td>  <span class=\'pt10\'>.</span><span class=\'pt13\'>catch</span>(<span class=\'pt10\'>err</span> <span class=\'pt17\'>=&gt;</span> <span class=\'pt13\'>setTimeout</span>(() <span class=\'pt17\'>=&gt;</span> { <span class=\'pt17\'>throw</span> <span class=\'pt10\'>err</span>; }));</td></tr></table></div></div>');
